[["index.html", "ensemblemerge package documentation Chapter 1 Package Information 1.1 Description 1.2 Prerequisites", " ensemblemerge package documentation Erik Skie 2021-03-29 Chapter 1 Package Information 1.1 Description ensemblemerge is a package that implements a common work flow for several single cell RNA sequence integration methods including Seurat V3, Scanorama, Harmony, Liger, and bbknn. The merging process is designed to be as streamlined as possible for the user, only requiring a SummarizedExperiment or SingleCellExperiment object and a specification of which method should be used to integrate in setParams(). 1.1.1 Quick Start Guide Once ensemblemerge is installed, merging batches can be performed by the following: library(ensemblemerge) data #some SingleCellExperiment or SummarizedExperiment object with batches to be integrated params = setParams() #different integration methods can be selected by setting method = c(&quot;Seurat&quot;, &quot;Harmony&quot;, &quot;Liger&quot;, &quot;Scanorama&quot;, &quot;BBKNN&quot;) merged_data = Merge(params, data) A SingleCellExperiment object is returned in merged_data with accompanying dimension reductions if applicable for the integration methods. 1.2 Prerequisites The following R packages are required for installation of ensemblemerge. if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(c(&quot;SingleCellExperiment&quot;, &quot;SummarizedExperiment&quot;, &quot;LoomExperiment&quot;)) install.packages(&quot;Seurat&quot;) devtools::install_github(&#39;theislab/kBET&#39;) devtools::install_github(&#39;satijalab/seurat-wrappers&#39;) devtools::install_github(&quot;cellgeni/sceasy&quot;) If you would like to use the python based integration methods, the following packages must also be installed in your python environment. If you do not have a python environment set, users can also call ensemblemerge::install_python_packages() which will install the python prerequisites into a reticulated python environment. pip3 install scanpy pip3 install bbknn pip3 install scanorama The ensemblemerge package can be installed from CRAN or Github (package is currently in alpha and only available on github to collaborators): install.packages(&quot;ensemblemerge&quot;) # or the development version # devtools::install_github(&quot;erikjskie/ensemblemerge&quot;) "],["merge-example-vignettes.html", "Chapter 2 Merge example vignettes 2.1 Processing data without merging batches 2.2 Merging with Seurat 2.3 Merging with bbknn", " Chapter 2 Merge example vignettes For more information on specific function parameters and class structures, see sections 3 and 4 respectively. This chapter covers basic vignettes of different integration methods using the example dataset provided in our package under dendrites from Villani et al. 2017. 2.1 Processing data without merging batches The following work flow is for processing data without performing batch correction. This can be done to prepare your data for downstream visualization without having to manually perform normalizing and scaling. library(ensemblemerge) params = setParams(method = &quot;Uncorrected&quot;, batch = &quot;batchlb&quot;) #any additional processing argument can be added here, see chapter 3: classes uncorrected = Merge(params, dendrites) uncorrected contains normalized and scaled read counts and a PCA reduction. generating a UMAP reduction can be done by the following. library(Seurat) uncorrected = as.Seurat(uncorrected, counts = &quot;counts&quot;, data = &quot;logcounts&quot;) uncorrected &lt;- RunUMAP(uncorrected, reduction = &quot;PCA&quot;, dims = 1:20, seed.use = 1) uncorrected &lt;- FindNeighbors(uncorrected, reduction = &#39;umap&#39;, dims = 1:2, verbose = FALSE) uncorrected &lt;- FindClusters(uncorrected, algorithm = 3, resolution = 0.01, verbose = FALSE) uncorrected$cluster &lt;- Idents(uncorrected) Visualize the UMAP. Idents(uncorrected) = &quot;batchlb&quot; p1 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Batch&quot;) Idents(uncorrected) = &quot;CellType&quot; p2 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Cell Type&quot;) p1 + p2 Figure 2.1: Uncorrected UMAP of single cell data by batch and cell type 2.2 Merging with Seurat This workflow is for integrating batches with the Seurat V3 batch correction method. library(ensemblemerge) params = setParams(method = &quot;Seurat&quot;, batch = &quot;batchlb&quot;) #any additional processing argument can be added here, see chapter 3: classes seurat_integrate = Merge(params, dendrites) seurat_integrate contains normalized and scaled read counts and a PCA reduction. generating a UMAP reduction can be done by the following. library(Seurat) seurat_integrate = as.Seurat(seurat_integrate, counts = &quot;logcounts&quot;, data = &quot;logcounts&quot;) seurat_integrate &lt;- RunUMAP(seurat_integrate, reduction = &quot;PCA&quot;, dims = 1:20, seed.use = 1) seurat_integrate &lt;- FindNeighbors(seurat_integrate, reduction = &#39;umap&#39;, dims = 1:2, verbose = FALSE) seurat_integrate &lt;- FindClusters(seurat_integrate, algorithm = 3, resolution = 0.01, verbose = FALSE) seurat_integrate$cluster &lt;- Idents(seurat_integrate) Visualize the UMAP (including the uncorrected data for reference). Idents(uncorrected) = &quot;batchlb&quot; p1 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Batch&quot;) Idents(uncorrected) = &quot;CellType&quot; p2 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Cell Type&quot;) Idents(seurat_integrate) = &quot;batchlb&quot; p3 &lt;- DimPlot(seurat_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Batch&quot;) Idents(seurat_integrate) = &quot;CellType&quot; p4 &lt;- DimPlot(seurat_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Cell Type&quot;) p1 + p2 + p3 + p4 Figure 2.2: Seurat V3 corrected UMAP of single cell data by batch and cell type 2.3 Merging with bbknn This workflow is for integrating batches with the bbknn batch correction method. To take full advantage of all available features of bbknn integration, install the following packages. remotes::install_github(&quot;rstudio/reticulate&quot;) #increases available memory system(&quot;pip3 install pynndescent&quot;) #optimizes dimension reduction system(&quot;pip3 install leidenalg&quot;) #optional clustering algorithm that improves bbknn performance Perform default bbknn integration. library(ensemblemerge) params = setParams(method = &quot;BBKNN&quot;, batch = &quot;batchlb&quot;, return = &quot;Seurat&quot;) #any additional processing argument can be added here, see chapter 3: classes bbknn_integrate = Merge(params, dendrites) bbknn_integrate contains normalized and scaled read counts and a bbknn neighbor graph. generating a UMAP reduction can be done by the following bbknn_integrate &lt;- RunUMAP(bbknn_integrate, nn.name = &quot;bbknn&quot;) Visualize the UMAP (including the uncorrected data for reference). Idents(uncorrected) = &quot;batchlb&quot; p1 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Batch&quot;) Idents(uncorrected) = &quot;CellType&quot; p2 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Cell Type&quot;) Idents(bbknn_integrate) = &quot;batchlb&quot; p3 &lt;- DimPlot(bbknn_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Batch&quot;) Idents(bbknn_integrate) = &quot;CellType&quot; p4 &lt;- DimPlot(bbknn_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Cell Type&quot;) p1 + p2 + p3 + p4 Figure 2.3: bbknn corrected UMAP of single cell data by batch and cell type By default, bbknn integration uses ridge regression, which can improve integration by combining both biological and technical effects. This step can be removed by library(ensemblemerge) params = setParams(method = &quot;BBKNN&quot;, batch = &quot;batchlb&quot;, ridge_regress = FALSE) #any additional processing argument can be added here, see chapter 3: classes bbknn_integrate = Merge(params, dendrites) bbknn_integrate contains normalized and scaled read counts and a bbknn neighbor graph. generating a UMAP reduction can be done by the following bbknn_integrate &lt;- RunUMAP(bbknn_integrate, nn.name = &quot;bbknn&quot;) Visualize the UMAP (including the uncorrected data for reference). Idents(uncorrected) = &quot;batchlb&quot; p1 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Batch&quot;) Idents(uncorrected) = &quot;CellType&quot; p2 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Cell Type&quot;) Idents(bbknn_integrate) = &quot;batchlb&quot; p3 &lt;- DimPlot(bbknn_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Batch&quot;) Idents(bbknn_integrate) = &quot;CellType&quot; p4 &lt;- DimPlot(bbknn_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Cell Type&quot;) p1 + p2 + p3 + p4 Figure 2.4: bbknn without ridge regression corrected UMAP of single cell data by batch and cell type which can improve performance. If you have additional cell data you would like to support the integration (i.e. cell type), you can add that by the following library(ensemblemerge) params = setParams(method = &quot;BBKNN&quot;, batch = &quot;batchlb&quot;, confounder_key = &quot;CellType&quot;) #any additional processing argument can be added here, see chapter 3: classes bbknn_integrate = Merge(params, dendrites) bbknn_integrate contains normalized and scaled read counts and a bbknn neighbor graph. generating a UMAP reduction can be done by the following bbknn_integrate &lt;- RunUMAP(bbknn_integrate, nn.name = &quot;bbknn&quot;) Visualize the UMAP (including the uncorrected data for reference). Idents(uncorrected) = &quot;batchlb&quot; p1 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Batch&quot;) Idents(uncorrected) = &quot;CellType&quot; p2 &lt;- DimPlot(uncorrected, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Uncorrected Cell Type&quot;) Idents(bbknn_integrate) = &quot;batchlb&quot; p3 &lt;- DimPlot(bbknn_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Batch&quot;) Idents(bbknn_integrate) = &quot;CellType&quot; p4 &lt;- DimPlot(bbknn_integrate, reduction = &quot;umap&quot;, pt.size = 0.5, shuffle = TRUE) + ggplot2::ggtitle(label = &quot;Corrected Cell Type&quot;) p1 + p2 + p3 + p4 Figure 2.5: bbknn with cell type confound corrected UMAP of single cell data by batch and cell type which can improve the quality of integration. "],["functions.html", "Chapter 3 functions 3.1 setParams() 3.2 Merge()", " Chapter 3 functions 3.1 setParams() setParams() generates a Params object of class specified by the method argument, i.e. method = \"Seurat\" returns a SeuratParams object. The slots of the object can be modified on calling setParams() by passing in the name of the slot and the value into the function. i.e batch = \"batch\" setParams(method = &quot;Seurat&quot;, ...) Arguments Argument Description method character vector specifying the integration method, currently the following methods are available c(\"Seurat\", \"Harmony\", \"Liger\", \"Scanorama\", \"BBKNN\")  additional arguments that modify the slots of the Params object specified by the methods argument 3.2 Merge() Merge() generates a SingleCellExperiment object that has been batch integrated by the method specified in the params object. Merge(params, data) Arguments Argument Description params A params object generated by the setParams function data A SummarizedExperiment or SingleCellExperiment object with a metadata identifying the batches "],["classes.html", "Chapter 4 classes 4.1 UncorrectedParams", " Chapter 4 classes 4.1 UncorrectedParams Class generated from setParams(method = \"Uncorrected\") for normalizing and scaling data without batch correction. UncorrectedParams(batch = &quot;batch&quot;, dimreduc_names = c(&quot;PCA&quot; = &quot;pca&quot;, &quot;UMAP&quot; = &quot;umap&quot;, &quot;tSNE&quot; = &quot;tsne&quot;), npcs = 20, norm_data = TRUE, scaling = TRUE, regressUMI = FALSE, min_cells = 10, min_genes = 300, norm_method = &quot;LogNormalize&quot;, scale_factor = 10000, numHVG = 2000) Class Structure Slot Description batch metadata name specifying the batches dimreduc_names Names of the dimension reduction objects to return npcs Number of PCA dimensions to return in PCA reduction scaling boolean specifying whether scaling should be performed regressUMI boolean specifying whether the number of UMI should be regressed norm_method character specifying what normalization method to use min_cells minimum number of cells expressing a gene to keep for downstream analysis min_genes minimum number of genes a cell must express to keep for downstream analysis scale_factor Number to scale gene expression to numHVG Top N number of genes to assign as highly variable "],["references.html", "References", " References "]]
